框架应用开发文档：

一、基础配置
	1、入口文件定义,引用框架启动文件即可
		require dirname(__FILE__) . '/core/start.php';
	2、可选入口文件绑定模块、控制器、方法，定义常量：URL_BLIND
		 如 ：define('URL_BLIND', 'home');	define('URL_BLIND', 'home/index');
		 
	3、域名绑定：
		配置文件中： 'app_domain_blind' => array( '127.0.0.1' => 'home')

	4、地址路由：
		配置文件中：'url_route' => array('home/index' => 'home/system.Index')
	
	5、地址跳转
		通过系统提供的方法自动生成，需要传递全路径，然后自动生成可跳转路径：
		使用地址生成类：core\basic\Url::get('home/index/index')
		也可使用地址生成助手函数：url('home/index/index')
		 
二、系统常量

	START_TIME	 		//程序启动时间，不允许在入口文件自定义
	DOC_PATH			//站点文档路径，不允许在入口文件自定义
	ROOT_PATH			//站点部署路径，不允许在入口文件自定义
	CORE_PATH			//框架内核路径，不允许在入口文件自定义
	SITE_DIR			//站点目录，不允许在入口文件自定义
	M					//当前模块，不允许在入口文件自定义
	C					//当前控制器，不允许在入口文件自定义
	F					//当前方法，不允许在入口文件自定义
	URL					//当前请求路径，不允许在入口文件自定义
	
	APP_PATH			//应用程序路径，允许在入口文件自定义
	RUN_PATH			//运行时文件路径，允许在入口文件自定义
	CONF_PATH			//公共配置文件路径，允许在入口文件自定义
	STATIC_DIR			//静态资源目录，允许在入口文件自定义

	APP_CONTROLLER_PATH	//当前控制器路径，不允许在入口文件自定义
	APP_MODEL_PATH		//当面模型路径，不允许在入口文件自定义
	APP_VIEW_PATH		//当前视图路径,允许在入口文件自定义
	APP_THEME_DIR		//当前主题路径,不允许在入口文件自定义
	
	应用目录下：./config/config.php			//应用配置文件定义（文件名不可变）
	应用目录下：./function/function.php		//应用函数文件定义（文件名不可变）
	公共目录下：./function.php				//公共函数文件（文件名不可变）
	公共目录下：./XxxController.php  命名空间：app\comm;	//各模块公共控制器，以模块名定义文件
	公共目录下：./XxxModel.php		   命名空间：app\comm;	//各模块公共模型，以模块名定义文件
	
	

三、应用开发

	1、模型
		用户应用模型应继承core\basic\Model类
		模型命名空间：app\home\model;必须以app开头,模型名必须以Model结尾
		可配置的属性：
		public $table='ay_user'; 					//当前模型默认操作的数据库表名，默认为模块名
		public $autoTimestamp = true;				//更新或新增时是否自动插入时间，默认为false
		public $intTimeFormat = true;				//更新或新增时是否自动插入时间格式是否未数字，默认为false
		public $updateTimeField = 'update_time';	//更新的时间字段名，默认为update_time
		public $createTimeField = 'create_time;		//新增的时间字段名，默认为create_time
	
	2、控制器
		控制器命名空间：app\home\controller;必须以app开头，控制器名必须以Controller结尾
		多级控制器访问使用点分URL模式：system.UserInfo，或者使用路由调度
		驼峰控制器访问使用下划线模式，系统自动大小写转换：system.urer_info
		1）用户控制器应继承core\basic\Controller类，继承的方法有：
			$this->display($file)		||助手函数：display($file)			//解析并显示模板内容
			$this->parser($file)		||助手函数：parser($tpl)			//解析模板返回内容
			$this->setTheme($themeName)	||助手函数：set_theme($theme_name)	//设置主题
			$this->assign($var, $value)	||助手函数：assign($var, $value)	//注入模板数据
			$this->getVar($var)			||助手函数：get_var($var)			//获取注入的数据
			$this->page($tatal, $morePageStr = false) ||助手函数：page($tatal, $morePageStr = false)	//生成分页代码
			
			$this->config($item = null, $array = false) //获取配置参数
			$this->log($content, $level = "info") //写入日志
			
		2）如控制器需要返回数据：
			使用return即可，输出格式由配置文件规定，html/json数据,return array{'code'=>0,'username'=>'xsh'};
			也可以使用内容输出类：core\basic\Response::handle($data)或core\basic\Response::json($code, $data)直接输出;
			也可以使用response助手函数：response($data)或json($code, $data)
			
		3）控制器空方法：_empty()，当无法匹配到方法时自动调用
		
						
四、函数库:
	get_user_bs()  				//返回用户浏览器
	get_user_os()				//返回用户操作系统
	get_user_ip()				//返回用户IP
	get_url($url, $fields) 		//返回远程地址内容，$fields为数组模型
	get_datetime($timestamp = null)	//返回时间戳格式化日期时间，默认当前
	get_date($timestamp = null)		//返回时间戳格式化日期，默认当前
	get_date_diff($startstamp, $endstamp, $return = 'm')			//返回时间戳差值部分，年、月、日,return为 y|m|d
	get_ip_number($ip)												//获取IP地址数字字符串
	get_tree($data, $tid, $idField, $pidField, $sonName = 'son')	//生成无限极树，$data为二维数组数据
	get_mapping($array, $vValue, $vKey = null)						//获取数据映射数据，vKey可选
	get_page()					//获取URL分页参数，非法数据返回1
	get_request_method()		//获取请求类型
	get_current_url()			//获取当前完整URL地址
	get_strpos($string, $find, $n)	// 获取字符串第N次出现位置
	
	
	escape_string($string)  	//返回转义数据，支持字符串、数组、对象
	decode_string($string)		//返回字符反转移数据，支持字符串、数组、对象
	encrypt_string($string)		//返回字符串双层MD5加密数据
	get_uniqid()				//返回唯一标识符数据
	clear_html_blank($string)	//清洗html代码的空白符号
	trim_slash($string)			//去除两端斜杠
	hump_to_underline($string)	//驼峰转下划线方式

	in_object($needle, $object)	//值是否在对象中
	is_multi_array($array)		//是否为多维数组
	mult_array_merge($array1, $array2)	// 多维数组合并
	is_mobile()					//是否为移动设备访问
	is_post()					//是否为POST请求
	is_get()					//是否为GET请求
	is_put()					//是否为PUT请求
	is_patch()					//是否为PATCH请求
	is_delete()					//是否为delete请求
	is_ajax()					//是否为AJAX请求
	is_https() 					//是否为https请求
	
	check_dir($path, $create = false)					//检测目录是否存在
	create_dir($path)									//创建目录
	check_file($path, $create = false, $content = null)	//检查文件是否存在
	create_file($path, $content = null, $over = false)	//创建文件
	dir_list($path)										//目录文件夹列表
	file_list($path)									//目录文件列表
	path_list($path)									//目录下文件及文件夹列表
	is_image($path)										//检查文件是否为图片
	upload($input_name, $file_type = 'other', $file_ext = null, $max_width = null, $max_height = null)	//上传文件
	resize_img($src_image, $out_image, $max_width = null, $max_height = null, $img_quality = 90) 			//等比缩放图片
	
	url($url)						//生成实际跳转路径
	error($string, $jump_url = null, $time = 2)	//错误显示
	success($string, $jump_url = null, $time = 2)//成功信息
	alert($info)					//弹窗信息
	alert_back($info)				//弹窗并返回
	location($url)					//跳转地址
	alert_location($info, $url)		//弹窗并跳转
	alert_close($info)				//弹窗并关闭
	
	model($name, $new = false)		//自动实例化模型
	
	display($tpl)					//模板输出
	parser($tpl)					//模板解析
	set_theme($theme_name)			//设置主题
	assign($var, $value)			//注入模板变量
	get_var($var)					//获取模板变量
	page($tatal, $morePageStr = false)	
	
	response($data)					//自动输出格式数据
	json($code, $data)				//输出JSON数据
	
	filter($varname, $condition)		//获取过滤数据 ，添加传递数组
					array('source'=>'post','none'=>true,'require'=>true,'type'=>'int','max'=>5,'min'=2,'default'=>'')
					字段名称：$varname,用字段名称做key传递文本
					数据源:source，[post、get、cookie、session、both、string]
					数据类型：type，[int、float、num、letter、var、bool、date、array、object]
					是否允许空：none，[true、false],如果为false接受的收据为空，则直接报错
					是否必须：require，[true、false],如果为true意味着如果数据不满足要求直接报错，否则返回null
					正则表达：regular，接受正则表达式
					最大值|最大长度：max
					最小值|最小长度：min
					默认值：default
					
	get($name, $type = null, $require = false, $vartext = '', $default = "")	//获取GET数据
	post($name, $type = null, $require = false, $vartext = '', $default = "")	//获取POST数据
	cookie($name, $value = null, $expire = null, $path = null)					//读取或获取cookie数据
	session($name, $value = null)												//读取或写入session信息,$name支持点分多级获取
	



五、数据库操作方法：

	1、数据库操作执行：
		A、通过Db类操作：（必须带表名）
			静态方式
				Db::table('ay_user')->select()		//执行连贯操作方法
				Db::all('select * from ay_user')	//执行原生操作方法
			对象方式
				$db = new Db();
				$db->table('ay_user')->select()		//执行连贯操作方法
				$db->all('select * from ay_user')	//执行原生操作方法
				
		B、通过模型操作：（只支持对象方式，并支持自动表名）
				$user = new UserModel(); || $user = model('User'); || model('home.system.User'); //多级模型初始化
				$user->select();					 	//执行连贯操作方法
				$user->all('select * from ay_user')		//执行原生操作方法
			
	2、支持连贯操作的方法：
		table($table)			//接收完整表名，可以是字符串、数组，'ay_user',array('ay_user'=>'a','ay_role')
		name($table)			//接收表名，可以是字符串、数组，'user',array('user'=>'a','role')
		alias($alias)			//设置表别名，只适合单表查询时，传递字符串，'a'
		distinct($flag)			//设置返回非重复数据，可选传递字布尔值，默认true
		field($field)			//设置返回数据字段，可以为字符串、数组，'username,passwd',array('username'=>'uname','passwd'=>'pwd')
		where($where,$inConnect, $outConnect) //设置条件，可多次调用，可以为字符串、数组,多次调用本方法时与前面条件使用AND连接，$where参数数组内部的条件默认使用AND连接,'id=1',array('id'=>1,'age>3')
		exists($subsql)			//设置EXISTS查询，传递子查询或闭包子查询,支持用闭包函数连贯查询构建语句
		notExists($subSql)		//设置NOT EXISTS查询，传递子查询或闭包子查询,支持用闭包函数连贯查询构建语句
		in($field, $range)		//传递字段名和范围数据，可多次调用，范围参数接受字符串、数组或子查询，'username','1,2,3'; 'username',array(1,2,3);
		notIn($field, $range)	//传递字段名和范围数据，可多次调用，范围参数接受字符串、数组或子查询，'username','1,2,3'; 'username',array(1,2,3);
		order($order)			//设置排序，可以为字符串、数组,如"id DESC,name",array('id'=>'DESC','name')
		limit($limit)			//设置限制，可接受：单个参数数，如 1,单个参数字符串，如'1,10',两个参数数字，如：1,10
		group($group)			//设置分组，可以传递字符串、数字数组，如"name,sex",array('name','sex')
		having($having, $inConnect, $outConnect)	//分组查询时条件语句，可多次调用，可以为字符串、数组,多次调用本方法时与前面条件使用AND连接，$where参数数组内部的条件默认使用AND连接
		join($join)				//设置多表连接查询，可多次调用，可以为一维或二维数组，array('table','a.id=b.id','INNER'),第一个参数为数据表，第二个参数为ON条件，第三个参数为类型,
		like($field, $keyword, $matchType)//关键字条件匹配,$field支持数组或点分字符串传递多个字段,$matchType匹配模式，默认为all,可选left,right
		notLike($field, $keyword, $matchType)//关键字条件不匹配,$field支持数组或点分字符串传递多个字段,$matchType匹配模式，默认为all,可选left,right
		union($subSql, $isAll)	//设置多表合并查询， 可多次调用，子查询可以使用数字数组传递多个，isAll决定是否UNION ALL
		page($doPage, $startPage, $pageSize)//设置分页，参数一是否分页，参数二起始页，参数三分页大小
		data($data)				//待插入或更新数据数组，分解insert、update函数，实现 table($table)->data($data)->insert();
		from($subSql)			//接受子查询或闭包子查询from(function ($query) {return $query->table('ay_user')->select(false);})
		relation($field, $array)//生成待插入或更新的关联数据数组，如 一个用户对应多个角色表数据插入，relation($ucode,$rcodes)
		showSql()				//设置显示输出SQL语句到页面,可选传递布尔值
		showRs()				//设置直接输出结果到页面,可选传递布尔值
	
	3、连贯操作终极方法
		select($type)			//获取多条数据，可选$type传递1,2,3返回不同格式数据数组,可传递一个闭包函数
		find($type)				//获取一条数据，可选$type传递1,2,3返回不同格式数据数组,可传递一个闭包函数
		column($fields, $key)	//返回指定字段数据数组,可选$key， 传递字段名字符串或数字数组，单个字段，返回一维数组，如果多个字段，返回二维数组数
		value($field)			//返回指定字段的一条数据的值
		max($field)				//返回指定列最大值
		min($field)				//返回指定列最小值
		avg($field)				//返回指定列平均值
		sum($field)				//返回指定列合计值
		insert($data, $batch)  	//插入数据，可选传递$data一维或二维数据数组，未传递时使用data()数据,可选$batch是否批量一次性插入，默认true
		insertGetId($data, $batch)//插入数据返回最后一个ID，可选传递$data一维或二维数据数组，未传递时使用data()数据,可选$batch是否批量一次性插入，默认true
		update($data)			//更新数据，可选传递$data一维数组或字符串，如："username='xsh'"，未传递时使用data()数据
		setField($field, $value)//更新指定字段
		setInc($field, $value)	//字段自增，默认value为1
		setDec($field, $value)	//字段自减，默认value为1
		delete($data, $key)		//删除数据，可选data使用字符串或数组设置主键值，可选$key设置主键
	
	4、完整数据库语句操作方法
		getInstance()	 	//获取数据库连接实例
		conn($cfg)   	 	//获取数据库连接对象
		query($sql, $type) 	//执行数据库查询,返回结果集对象
		isExist($sql)		//数据是否存在模型，接受完整SQL语句，返回boolean数据
		rows($table)		//获取记录总量模型，接受数据库表名，返回int数据
		fields($table)		//读取字段数量模型，接受数据库表名，返回int数据
		tableInfo($table)	//获取表信息,接受数据库表名，返回表字段信息数组
		one($sql, $type)	//查询一条数据模型，接受完整SQL语句，有数据返回对象数组，否则空数组
		all($sql, $type)	//查询多条数据模型，接受完整SQL语句，有数据返回二维对象数组，否则空数组
		amd($sql)			//数据增、删、改模型，接受完整SQL语句，返回影响的行数的int数据
		insertId()			//最近一次插入数据的自增字段值，返回int数据
		multi($sql)			//执行多条SQL模型，成功返回true,否则false

六、模板标签
	
	1、直接输出类标签
		{include file='head.html'} 	//引用文件
		{url./home/index/index}		//跳转地址
		{DB_HOST}					//系统常量
		{$name}						//普通变量
		{$user->name}				//对象变量
		{$user['name']}				//数组变量
		{$config.public_app}		//配置参数,支持点分多级
		{$session.username}			//会话变量,支持点分多级
		{$cookie.username}			//会话变量
		{$server.name}				//环境变量
		{$post.name}				//POST数据
		{$get.name}					//GET数据
		{fun=md5('name')}			//使用函数输出
		
		{if(a==b)} 					//条件语句
			aaaa 
		{else} 
			bbbb  
		{/if}	
			
		{foreach $var(key,value,num)}//循环语句	
			[num]  [value->name] 
			[value]
		{/foreach}	
		
		{#}...{#}					//代码注释
		{php}...{/php}				//PHP代码
	
	2、套用类标签
		[$name]						//普通变量
		[$user->name]				//对象变量
		[$user['name']]				//数组变量
		[$config.name]				//配置参数,支持多级
		[$session.name]				//会话变量,支持多级
		[$cookie.name]				//会话变量
		[$server.name]				//环境变量
		[$post.id]					//POST数据
		[$get.id]					//GET数据
		[fun=md5('aaa')]			//使用函数
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

